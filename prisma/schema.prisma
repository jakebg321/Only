// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CREATOR
  MANAGER
  SUBSCRIBER
  ADMIN
}

enum MessageSender {
  SUBSCRIBER
  AI
  CREATOR
}

enum ContentRequestStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum PersonalityTone {
  FLIRTY
  FRIENDLY
  MYSTERIOUS
  PROFESSIONAL
  PLAYFUL
  DOMINANT
  SUBMISSIVE
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  passwordHash  String
  role          UserRole
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  profile       Json?       // Grok-powered user profile and context

  creator       Creator?
  subscriber    Subscriber?
  manager       Manager?
  psychProfile  PsychologicalProfile?
}

model Creator {
  id                String      @id @default(cuid())
  userId           String      @unique
  user             User        @relation(fields: [userId], references: [id])
  displayName      String
  bio              String?
  profileImageUrl  String?
  subscriptionPrice Decimal     @db.Decimal(10, 2)
  aiModelTrained   Boolean     @default(false)
  aiModelUrl       String?
  isVerified       Boolean     @default(false)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt

  personality      CreatorPersonality?
  chatSessions     ChatSession[]
  responseTemplates ResponseTemplate[]
  contentRequests  ContentRequest[]
  analytics        Analytics[]
  subscribers      CreatorSubscriber[]
  managedBy        ManagerCreator[]
}

model CreatorPersonality {
  id                  String          @id @default(cuid())
  creatorId          String          @unique
  creator            Creator         @relation(fields: [creatorId], references: [id])
  tone               PersonalityTone @default(FLIRTY)
  greetingMessage    String
  interests          String[]
  boundaries         String[]
  customInstructions String?
  responseStyle      String?
  languagePreferences String[]        @default(["en"])
  maxResponseLength  Int             @default(500)
  enableEmojis       Boolean         @default(true)
  enableMediaSuggestions Boolean      @default(true)
  flirtLevel         Int             @default(5)
  explicitLevel      Int             @default(2)
  subscriptionAcknowledgment Boolean @default(true)
  fantasyFocus       String[]        @default([])
  petNames           String[]        @default(["babe", "sexy", "baby"])
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
}

model Subscriber {
  id              String      @id @default(cuid())
  userId         String      @unique
  user           User        @relation(fields: [userId], references: [id])
  displayName     String?
  totalSpent      Decimal     @default(0) @db.Decimal(10, 2)
  joinDate        DateTime    @default(now())
  
  chatSessions    ChatSession[]
  subscriptions   CreatorSubscriber[]
}

model Manager {
  id              String      @id @default(cuid())
  userId         String      @unique
  user           User        @relation(fields: [userId], references: [id])
  companyName     String?
  commissionRate  Decimal     @default(20) @db.Decimal(5, 2)
  
  creators        ManagerCreator[]
}

model CreatorSubscriber {
  id              String      @id @default(cuid())
  creatorId      String
  creator        Creator     @relation(fields: [creatorId], references: [id])
  subscriberId   String
  subscriber     Subscriber  @relation(fields: [subscriberId], references: [id])
  subscribedAt   DateTime    @default(now())
  expiresAt      DateTime?
  isActive       Boolean     @default(true)
  monthlyAmount  Decimal     @db.Decimal(10, 2)
  
  @@unique([creatorId, subscriberId])
}

model ManagerCreator {
  id          String      @id @default(cuid())
  managerId  String
  manager    Manager     @relation(fields: [managerId], references: [id])
  creatorId  String
  creator    Creator     @relation(fields: [creatorId], references: [id])
  startDate  DateTime    @default(now())
  endDate    DateTime?
  isActive   Boolean     @default(true)
  
  @@unique([managerId, creatorId])
}

model ChatSession {
  id              String      @id @default(cuid())
  creatorId      String
  creator        Creator     @relation(fields: [creatorId], references: [id])
  subscriberId   String
  subscriber     Subscriber  @relation(fields: [subscriberId], references: [id])
  startedAt      DateTime    @default(now())
  lastMessageAt  DateTime    @default(now())
  isActive       Boolean     @default(true)
  totalMessages  Int         @default(0)
  content        String?     @db.Text // Message content for embedding search
  summary        String?     @db.Text // Grok-3 generated session summary
  undertone      String?     // Detected user type (MARRIED_GUILTY, etc.)
  
  messages        Message[]
  contentRequests ContentRequest[]
  
  @@index([creatorId, subscriberId])
  @@index([subscriberId]) // For user-specific vector queries
}

model Message {
  id                 String         @id @default(cuid())
  sessionId         String
  session           ChatSession    @relation(fields: [sessionId], references: [id])
  senderType        MessageSender
  content           String         @db.Text
  messageType       String         @default("text") // text, image, video, audio
  mediaUrl          String?
  isAiGenerated     Boolean        @default(false)
  aiConfidenceScore Float?
  createdAt         DateTime       @default(now())
  readAt            DateTime?
  
  @@index([sessionId, createdAt])
}

model ResponseTemplate {
  id             String      @id @default(cuid())
  creatorId     String
  creator       Creator     @relation(fields: [creatorId], references: [id])
  triggerPhrase String
  responseText  String      @db.Text
  category      String
  usageCount    Int         @default(0)
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@index([creatorId, category])
}

model ContentRequest {
  id           String                @id @default(cuid())
  sessionId   String
  session     ChatSession           @relation(fields: [sessionId], references: [id])
  creatorId   String
  creator     Creator              @relation(fields: [creatorId], references: [id])
  requestType String               // photo, video, audio, custom
  prompt      String               @db.Text
  status      ContentRequestStatus @default(PENDING)
  resultUrl   String?
  errorMessage String?
  createdAt   DateTime             @default(now())
  completedAt DateTime?
  
  @@index([creatorId, status])
}

model Analytics {
  id                String      @id @default(cuid())
  creatorId        String
  creator          Creator     @relation(fields: [creatorId], references: [id])
  date             DateTime    @db.Date
  messagesSent     Int         @default(0)
  aiResponses      Int         @default(0)
  revenueGenerated Decimal     @default(0) @db.Decimal(10, 2)
  newSubscribers   Int         @default(0)
  activeChats      Int         @default(0)
  contentGenerated Int         @default(0)
  
  @@unique([creatorId, date])
  @@index([creatorId, date])
}

model UserPreferences {
  id              String      @id @default(cuid())
  userId          String      @unique
  preferredName   String?
  interests       String[]
  chatStyle       String?     // casual, flirty, romantic, friendly
  customRequests  Json?       // Store frequently requested content types
  rememberDetails Boolean     @default(true)
  language        String      @default("en")
  timezone        String      @default("UTC")
  lastActive      DateTime    @default(now())
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

// Psychological Profiling Models
model PsychologicalProfile {
  id                   String      @id @default(cuid())
  userId               String      @unique
  user                 User        @relation(fields: [userId], references: [id])
  
  // VEAL Framework
  vulnerability        String      @default("UNKNOWN") // LONELY, NEGLECTED, INADEQUATE, VULNERABLE, UNKNOWN
  ego                  String      @default("UNKNOWN") // HERO, ALPHA, PROVIDER, EXPLORER, UNKNOWN
  attachment           String      @default("UNKNOWN") // ANXIOUS, AVOIDANT, SECURE, DISORGANIZED, UNKNOWN
  leverage             String      @default("UNKNOWN") // FINANCIAL, EMOTIONAL, SOCIAL, SEXUAL, UNKNOWN
  spenderLevel         String      @default("UNKNOWN") // WHALE, REGULAR, MICRO, UNKNOWN
  
  // Behavioral Metrics
  responseTime         Float       @default(0) // average in ms
  hesitationLevel      Float       @default(0) // 0-1 scale
  engagementScore      Int         @default(50) // 0-100
  manipulabilityScore  Int         @default(50) // 0-100
  
  // Profile Confidence
  confidence           Float       @default(0) // 0-1 scale
  dataPoints           Int         @default(0)
  
  // Strategy
  recommendedStrategy  String      @default("gathering_data")
  conversionProbability Float      @default(0.5) // 0-1
  estimatedValue       Float       @default(0) // predicted monthly revenue
  
  // Insights (stored as JSON for flexibility)
  insights             Json        @default("{}")
  keyStatements        String[]
  triggerWords         String[]
  
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  
  // Relations
  probeResponses       ProbeResponse[]
  behaviorEvents       BehaviorEvent[]
  
  @@index([userId])
}

model ProbeResponse {
  id            String      @id @default(cuid())
  profileId     String
  profile       PsychologicalProfile @relation(fields: [profileId], references: [id])
  
  probeId       String      // ID of the probe question
  question      String      @db.Text
  response      String      @db.Text
  category      String      // vulnerability, ego, attachment, leverage, financial
  phase         Int         // 1, 2, or 3
  
  createdAt     DateTime    @default(now())
  
  @@index([profileId])
}

model BehaviorEvent {
  id            String      @id @default(cuid())
  profileId     String
  profile       PsychologicalProfile @relation(fields: [profileId], references: [id])
  
  eventType     String      // message_sent, payment_viewed, typing_started, etc.
  data          Json        // Event-specific data
  timestamp     DateTime    @default(now())
  
  @@index([profileId, timestamp])
}

model ConversationMemory {
  id            String      @id @default(cuid())
  userId        String
  fact          String      // "likes coffee", "works in tech", "has a dog named Max"
  confidence    Float       @default(0.5) // 0-1 based on how often mentioned
  lastMentioned DateTime    @default(now())
  category      String      // personal, work, preferences, relationships
  metadata      Json?       // Additional context
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@index([userId, category])
  @@index([userId, lastMentioned])
}

// Analytics Models
model UserSession {
  id              String    @id @default(cuid())
  sessionId       String    @unique
  userId          String?
  ipAddress       String
  userAgent       String    @db.Text
  deviceType      String    // mobile, desktop, tablet
  browser         String
  os              String
  country         String?
  city            String?
  referrerSource  String?   // google, direct, social
  landingPage     String?
  startTime       DateTime  @default(now())
  endTime         DateTime?
  duration        Int?      // seconds
  pageViews       Int       @default(1)
  events          Json      @default("[]")
  
  @@index([userId])
  @@index([ipAddress])
  @@index([sessionId])
  @@index([startTime])
}

model UserMetrics {
  id                String    @id @default(cuid())
  userId            String    @unique
  
  // Lifetime stats
  firstVisit        DateTime  @default(now())
  lastVisit         DateTime  @default(now())
  totalVisits       Int       @default(1)
  totalSessionTime  Int       @default(0) // seconds
  totalMessages     Int       @default(0)
  totalSpent        Decimal   @default(0) @db.Decimal(10, 2)
  
  // Averages
  avgSessionLength  Int       @default(0) // seconds
  avgResponseTime   Int       @default(0) // milliseconds
  engagementScore   Float     @default(0)
  
  // Conversion
  firstPurchaseAt   DateTime?
  lastPurchaseAt    DateTime?
  purchaseCount     Int       @default(0)
  subscriptionTier  String?
  churnRisk         Float     @default(0) // 0-1
  
  updatedAt         DateTime  @updatedAt
  
  @@index([userId])
}

model RevenueEvent {
  id              String    @id @default(cuid())
  userId          String
  sessionId       String?
  amount          Decimal   @db.Decimal(10, 2)
  currency        String    @default("USD")
  type            String    // subscription, tip, content
  personalityType String?   // MARRIED_GUILTY, etc
  strategy        String?   // discretion, urgency, etc
  triggerEvent    String?   // what message/action caused purchase
  confidence      Float?    // personality confidence at purchase
  timestamp       DateTime  @default(now())
  
  @@index([userId, timestamp])
  @@index([personalityType])
}

model EventLog {
  id          String    @id @default(cuid())
  sessionId   String
  userId      String?
  eventType   String    // page_view, message_sent, button_click, etc
  eventData   Json      // flexible data storage
  timestamp   DateTime  @default(now())
  
  @@index([sessionId, timestamp])
  @@index([userId, timestamp])
  @@index([eventType])
}